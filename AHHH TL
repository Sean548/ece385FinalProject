  
/************************************************************************
					ECE 385 Final Project: Super Gene Bros
					Peter Hevrdejs & Sean McGee Fall 2019
							  University of Illinois
************************************************************************/

module Game (
	input  logic        CLK,
	input  logic 		  RESET,
	output logic [8:0]  LEDG,
	input  logic [1:0]  Dpad,
	input  logic 		  Button_A,
	input  logic		  Button_B,
	input  logic        Pause,
	
	output logic [7:0]  VGA_R,        //VGA Red
                       VGA_G,        //VGA Green
                       VGA_B,        //VGA Blue
   output logic        VGA_CLK,      //VGA Clock
                       VGA_SYNC_N,   //VGA Sync signal
                       VGA_BLANK_N,  //VGA Blank signal
                       VGA_VS,       //VGA virtical sync signal
                       VGA_HS,       //VGA horizontal sync signal
	
	output logic [6:0]  HEX0, HEX1, HEX2, HEX3,
	output logic [6:0]  HEX4, HEX5, HEX6, HEX7,
	
	input	 logic [15:0] SRAM_Data, //	Read-Only
	output logic [19:0] SRAM_ADDR, // Address For the SRAM
	output logic CE, UB, LB, OE // SRAM Controls 
	
	
);
assign CE = 1'b1;
assign UB = 1'b1;
assign LB = 1'b1;
assign OE = 1'b1;

logic [1:0] Dpad_data;
logic Button_A_data, Button_B_data, Pause_data;
logic [7:0] Coins; //Displays Hex5 & Hex 4 up to 99 coins then after is 1 up
logic [15:0] Score; //Total Score of the game Hex 3 - Hex 0
logic INIT_wire;	//When you raise it high, signifies the start and has set up time
logic INIT_FINISH_wire; //output to signify set up time has completed
logic adc_full_wire; //raised when a full 32bit sample has been read
logic [31:0] ADCDATA_wire; //the ouput of the 32bit sample
logic data_over_wire; //when sample correctly loaded into DAC high,, when begin read_out this is set Low
logic [9:0] DrawX, DrawY,Mario_X_Pos, Mario_Y_Pos;
logic Is_Mario,Is_Block1,Is_SBlock1,
logic Is_Gomba1; //Is_Gomba2, Is_Gomba3,Is_Gomba4,Is_Gomba5,Is_Gomba6,Is_Gomba7,Is_Gomba8,Is_Gomba9,Is_Gomba10,Is_Gomba11,Is_Gomba12,Is_Gomba13;
logic [2:0] Mario_Collision_Block1,Mario_Collision_SBlock1;
logic [12:0] map_Width = 7162;
logic [12:0] mapX;
logic [1:0] mapMove;
logic [9:0] Mario_ADDR, Gomba_ADDR, Block1_ADDR;
logic [3:0] Mario_in, Gomba_in, Block1_in;
logic [7:0] Mario_R, Mario_G, Mario_B,Block1_R,Block1_G,Block1_B,Gomba_R,Gomba_G,Gomba_B;
logic [7:0] Block1_R_In,Block1_G_In,Block1_B_In;
logic [7:0] Gomba_R_In,Gomba_G_In,Gomba_B_In;

vga_clk vga_clk_instance(
		.inclk0(CLK),
		.c0(VGA_CLK)
		);
		
VGA_controller VGA_controller(
		.Clk(CLK),
		.Reset(~RESET),
		.VGA_CLK(VGA_CLK),
		.DrawX,
		.DrawY,
		.VGA_HS,
		.VGA_VS,
		.VGA_BLANK_N,
		.VGA_SYNC_N
		);
		
Color_Mapper Color_Instance(
		.Is_Mario(Is_Mario),
		.Is_Block1,
		.Is_Gomba1,
		.Is_Gomba2,
		.Is_Gomba3,
		.Is_Gomba4,
		.Is_Gomba5,
		.Is_Gomba6,
		.Is_Gomba7,
		.Is_Gomba8,
		.Is_Gomba9,
		.Is_Gomba10,
		.Is_Gomba11,
		.Is_Gomba12,
		.Is_Gomba13,
		.Is_Block1,
		.Is_Block2,
		.Is_Block3,
		.Is_Block4,
		.Is_Block5,
		.Is_Block6,
		.Is_Block7,
		.Is_Block8,
		.Is_Block9,
		.Is_Block10,
		.Is_Block11,
		.Is_Block12,
		.Is_Block13,
		.Is_Block14,
		.Is_Block15,
		.Is_Block16,
		.Is_Block17,
		.Is_Block18,
		.Is_Block19,
		.Is_Block20,
		.Is_Block21,
		.Is_Block22,
		.Is_Block23,
		.Is_Block24,
		.Is_Block25,
		.Is_Block26,
		.Is_Block27,
		.Is_Block28,
		.Is_Block29,
		.Is_Block30,
		.CLK,
		.Mario_R_In(Mario_R),
		.Mario_G_In(Mario_G),
		.Mario_B_In(Mario_B),
		.Block1_R_In(Block1_R),
		.Block1_G_In(Block1_G),
		.Block1_B_In(Block1_B),
	   .Gomba1_R_In(Gomba_R),
		.Gomba1_G_In(Gomba_G),
		.Gomba1_B_In(Gomba_B),
		.DrawX(DrawX),
		.DrawY(DrawY),
		.VGA_R(VGA_R),
		.VGA_G(VGA_G),
		.VGA_B(VGA_B)
		);
		
ADDRMux WhichGomba(
		.Select({Is_Gomba1, Is_Gomba2, Is_Gomba3,Is_Gomba4,Is_Gomba5,Is_Gomba6,Is_Gomba7,Is_Gomba8,Is_Gomba9,Is_Gomba10,Is_Gomba11,Is_Gomba12,Is_Gomba13}),
		.Gomba1(Gomba1_ADDR),
		.Gomba2(Gomba2_ADDR),
		.Gomba3(Gomba3_ADDR),
		.Gomba4(Gomba4_ADDR),
		.Gomba5(Gomba5_ADDR),
		.Gomba6(Gomba6_ADDR),
		.Gomba7(Gomba7_ADDR),
		.Gomba8(Gomba8_ADDR),
		.Gomba9(Gomba9_ADDR),
		.Gomba10(Gomba10_ADDR),
		.Gomba11(Gomba11_ADDR),
		.Gomba12(Gomba12_ADDR),
		.Gomba13(Gomba13_ADDR),
		.Output(Gomba_ADDR)
		);

		
ROM_Gomba Gomba_Sprite(
		.READ_ADDR(Gomba_ADDR),
		.Clk(CLK),
		.DATA_OUT(Gomba_in)
		);

gombaTable gomba1_Color(
		.in(Gomba_in),
		.LUT_R(Gomba_R),
		.LUT_G(Gomba_G),
		.LUT_B(Gomba_B)
		);

ADDRMux WhichBlock(
		.Select({Is_Gomba1, Is_Gomba2, Is_Gomba3,Is_Gomba4,Is_Gomba5,Is_Gomba6,Is_Gomba7,Is_Gomba8,Is_Gomba9,Is_Gomba10,Is_Gomba11,Is_Gomba12,Is_Gomba13}),
		.Gomba1(Gomba1_ADDR),
		.Gomba2(Gomba2_ADDR),
		.Gomba3(Gomba3_ADDR),
		.Gomba4(Gomba4_ADDR),
		.Gomba5(Gomba5_ADDR),
		.Gomba6(Gomba6_ADDR),
		.Gomba7(Gomba7_ADDR),
		.Gomba8(Gomba8_ADDR),
		.Gomba9(Gomba9_ADDR),
		.Gomba10(Gomba10_ADDR),
		.Gomba11(Gomba11_ADDR),
		.Gomba12(Gomba12_ADDR),
		.Gomba13(Gomba13_ADDR),
		.Output(Gomba_ADDR)
		);		
ROM_Block Block_Sprite(
		.READ_ADDR(Block_ADDR),
		.Clk(CLK),
		.DATA_OUT(Block_in)
		);

blocktable block1_Color(
		.in(Block_in),
		.LUT_R(Block_R),
		.LUT_G(Block_G),
		.LUT_B(Block_B)
		);
		
ROM_SmallMario Mario_Sprite(
		.READ_ADDR(Mario_ADDR),
		.Clk(CLK),
		.DATA_OUT(Mario_in)
		);
		
//ROM_FloorBlock FB_Sprite(
//		.READ_ADDR(FBlock_ADDR),
//		.Clk(CLK),
//		.DATA_OUT(FBlock_in)
//		);

//floorBlockTable FBlock_Color(
//		.in(FBlock_in)
//		.LUT_R(FBlock_R),
//		.LUT_G(FBlock_G),
//		.LUT_B(FBlock_B)
//		);

SmallMarioTable Mario_Color(
		.in(Mario_in),
		.LUT_R(Mario_R),
		.LUT_G(Mario_G),
		.LUT_B(Mario_B)
		);

Mario Mario(
		.Clk(CLK),
		.Reset(~RESET),
		.frame_clk(VGA_VS),
		.DrawX,
		.DrawY,
		.keymove(Dpad_data),
		.keypress_B(Button_B_data),
		.keypress_A(Button_A_data),
		.pause(Pause),
		.Size(1'b0),
		.mapMove,
		.mapX,
		.Mario_Collision_Block1,
		.Mario_Collision_SBlock1,
		.Mario_X_Pos, 
		.Mario_Y_Pos,
		.Is_Mario,
		.mario_data_location(Mario_ADDR)
		);
		
Gomba Gomba1(
		.Clk(CLK), 
		.Reset(~RESET),
		.frame_clk(VGA_VS),
		.DrawX,
		.DrawY,
		.GombaX(450),
		.GombaY(384),
		.mapX,
		.mapMove,
		.leftBound(400),
		.rightBound(500),
		.Is_Gomba(Is_Gomba1)
		.Gomba_data_location(Gomba1_ADDR)
		);
		
audio_interface audio_instance(
		.Clk(CLK),
		.Reset(~RESET),
		.LDATA(SRAM_Data), //input the sound data
		.RDATA(SRAM_Data),
		.INIT(1'b1), //INIT_wire
		.INIT_FINISH(INIT_FINISH_wire),
		.adc_full(adc_full_wire),
		.data_over(data_over_wire),
		.ADCDATA(ADCDATA_wire)
		);
		
Block Block1(
		.Clk(CLK),
		.Reset(~RESET),
		.frame_clk(VGA_VS),
		.DrawX,
		.DrawY,
		.BlockX(2000),
		.BlockY(200),
		.MarioX(Mario_X_Pos),
		.MarioY(Mario_Y_Pos),
		.mapX,
		.Is_Block(Is_Block1),
		.Mario_Collision(Mario_Collision_Block1)
		);
		
SBlock SBlock1(
		.Clk(CLK), 
		.Reset(~RESET),
		.frame_clk(VGA_VS),
		.DrawX,
		.DrawY,
		.BlockX(300),
		.BlockY(384),
		.MarioX(Mario_X_Pos),
		.MarioY(Mario_Y_Pos),
		.mapX,
		.Is_Block(Is_SBlock1),
		.Mario_Collision(Mario_Collision_SBlock1)
		);
		
Sound_SM	Sound_Instance(
		.Clk(CLK),
		.Reset(~RESET),
		.Run(1'b1),
		.Initialize(INIT_wire),
		.Initialize_Done(INIT_FINISH_wire),
		.Full_Samp_Read(adc_full_wire), //dont worry about this one
		.A2D_SampOut(ADCDATA_wire), // dont worry about this one
		.Digital_Out(data_over_wire) //this is the little guy we will be using (digital sound file --> analog output)
		);
		
Reg_Dpad Dpad_Reg(
		.Clk(CLK),
		.Reset(~RESET),
		.Reg_In(Dpad),
		.Reg_Out(Dpad_data)
		);

Reg_Button Button_A_Reg(
		.Clk(CLK),
		.Reset(~RESET),
		.Reg_In(Button_A),
		.Reg_Out(Button_A_data)
		);

Reg_Button ButtonB_Reg(
		.Clk(CLK),
		.Reset(~RESET),
		.Reg_In(Button_B),
		.Reg_Out(Button_B_data)
		);

Reg_Button Pause_Reg(
		.Clk(CLK),
		.Reset(~RESET),
		.Reg_In(Pause),
		.Reg_Out(Pause_data)
		);




// Display the first 4 and the last 4 hex values of the received message
HexDriver hexdrv0 (
	.In0(Score[3:0]),
   .Out0(HEX0)
);
HexDriver hexdrv1 (
	.In0(Score[7:4]),
   .Out0(HEX1)
);
HexDriver hexdrv2 (
	.In0(Score[11:8]),
   .Out0(HEX2)
);
HexDriver hexdrv3 (
	.In0(INIT_FINISH_wire),
   .Out0(HEX3)
);
HexDriver hexdrv4 (
	.In0(Pause),
   .Out0(HEX4)
);
HexDriver hexdrv5 (
	.In0(Button_B),
   .Out0(HEX5) 
);
HexDriver hexdrv6 (
	.In0(Button_A),
   .Out0(HEX6)
);
HexDriver hexdrv7 (
	.In0(Dpad),
   .Out0(HEX7)
);

endmodule


// Comments & Concerns
// No frame buffer
// music sram
// pixels onchip
